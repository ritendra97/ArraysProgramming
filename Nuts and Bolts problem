//Nuts and bolts Problem
import java.util.*;
public class Solution 
{
	/*
	static void matchPairs(char nuts[], char bolts[], int n) 
    {
        Arrays.sort(nuts);
        Arrays.sort(bolts);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(nuts[i]==bolts[j])
                      System.out.print(nuts[i]+" ");
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(nuts[i]==bolts[j])
                      System.out.print(bolts[i]+" ");
            }
        }
    }*/
	private static int partition(char[] arr, int low, int high, char pivot)
    {
        int i = low;
        char temp1, temp2;
        for (int j = low; j < high; j++)
        {
            if (arr[j] < pivot){
                temp1 = arr[i];
                arr[i] = arr[j];
                arr[j] = temp1;
                i++;
            } else if(arr[j] == pivot){
                temp1 = arr[j];
                arr[j] = arr[high];
                arr[high] = temp1;
                j--;
            }
        }
        temp2 = arr[i];
        arr[i] = arr[high];
        arr[high] = temp2;
        return i;
    }
	static void matchPairs(char nuts[], char bolts[],int low, int high)
    {
		if (low < high)
        {
            int pivot = partition(nuts, low, high, bolts[high]);
            partition(bolts, low, high, nuts[pivot]);
            matchPairs(nuts, bolts, low, pivot-1);
            matchPairs(nuts, bolts, pivot+1, high);
        }
    }
	private static void printArray(char[] arr) {
        for (char ch : arr){
            System.out.print(ch + " ");
        }
        System.out.print("\n");
    }
	public static void main(String[] args) 
	{
		char nuts[] = {'@', '%', '$', '#', '^'};
		char bolts[] = {'%', '@', '#', '$', '^'};
		int n = nuts.length;
		matchPairs(nuts, bolts, 0, 4);
		 
        System.out.println("Matched nuts and bolts are : ");
        printArray(nuts);
        printArray(bolts);
	//	matchPairs(nuts,bolts,n);
	}
}
