//Find the smallest positive number missing from an unsorted array
1. Brute force approach
The simple solution is to search all positive integers starting from 1 (Think!). At worst case, we have to search for n+1 numbers.

Pseudo Code
int smallestPositive(int A[], int n)
{
    for(i = 1 to n+1) // search for 1 to n+1 elements
    {
        bool flag = false
        for(j = 0 to n-1) // iterating through the array
        {
            if(A[j] == i)
            {
                flag = true
                break
            }
        }
        if(flag == false)
            return i
    }
}
2.Using Sorting and Searching
We can sort the array and linearly scan the array to find the smallest positive element.

Pseudo Code
int smallestPositive(int A[], int n)
{
    sort(A)
    small = 1
    for(i = 0 to n-1)
    {
        if(small > A[i]) // to handle repetition and non positive numbers
            continue
        if(small == A[i])
            small = small + 1
        if(A[i] > small)
            return small
    }
    return small
}
Complexity Analysis
Suppose we are using heap sort to solve this problem.

Time Complexity: Sorting + Linear Scan for finding smallest positive

= O(nlogn) + O(n) = O(nlogn)

Space Complexity: O(1)
import java.util.*;
public class Solution 
{
	static int missingNumber(int arr[], int size)
    {
		  int i=0;
          while(i<size)
          {
        	  
        	  if(arr[i]>0 && arr[i]<arr.length+1 && arr[i]!=arr[arr[i]-1])
        	  {
        		  int index = arr[i]-1;
        		  int x = arr[i];
        		  arr[i]=arr[index];
        		  arr[index]=x;
        	  }
        	  else
        		  i++;
           }
          for(int j=0;j<size;j++)
          {
        	  if(arr[j]!=j+1)
        		  return j+1;
          }
          return arr.length+1;
    }
	public static void main(String[] args) 
	{
		int arr[] = {1,2,3,4,5};
		int size = arr.length;
		System.out.println(missingNumber(arr,size));
	}
}
