// Top K numbers in a stream

import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.*;

class Node {
	int val;
	int freq;

	public Node(int val, int freq) {
		super();
		this.val = val;
		this.freq = freq;
	}

}

public class Array {

	public static void topStramElement(int arr[],int k) {

		for (int i = 0; i < arr.length; i++) {

			HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
			PriorityQueue<Node> pq = new PriorityQueue<Node>(new Comparator<>() {

				@Override
				public int compare(Node o1, Node o2) {
					if (o1.freq == o2.freq) {
						// here o1>02 then it will return a positive number if you want to sort in decreasing order.
						// and o1<o2 then it will return a negative number if you want to sort in increasing order.
						return o1.val - o2.val;
					} else {
						return o2.freq - o1.freq;
					}
				}

			});

			for (int j = 0; j <= i; j++) {
				if (map.containsKey(arr[j])) {
					map.put(arr[j], map.get(arr[j]) + 1);

				} else {
					map.put(arr[j], 1);
				}
			}

			for (Integer key : map.keySet()) {
				pq.add(new Node(key, map.get(key)));
			}

			int count = k;
			while (!pq.isEmpty() && count>0) {
				System.out.print(pq.remove().val + " ");
				count--;
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		int arr[] = { 5, 2, 1, 3, 4 };
		topStramElement(arr,4);
	}
}


import java.util.*;
public class Solution 
{
	static int find(int arr[],int ele)
	{
		for(int i=0;i<arr.length;i++)
			if(arr[i]==ele)
				return i;
		return -1;
	}
	static void kTop(int arr[],int n,int k)
	{
		int top[] = new int[k+1];
		HashMap<Integer,Integer> freq= new HashMap<>();
		for(int i=0;i<k+1;i++)
		{
			freq.put(i,0);
		}
		for(int m=0;m<n;m++)
		{
			if(freq.containsKey(arr[m]))
				freq.put(arr[m], freq.get(arr[m])+1);
			else
				freq.put(arr[m],1);
			top[k]=arr[m];
			int i = find(top,arr[m]);
			i=i-1;
			while(i>=0)
			{
				if(freq.get(top[i])<freq.get(top[i+1]))
				{
					int temp = top[i];
					top[i]=top[i+1];
					top[i+1]=temp;
				}
				else if((freq.get(top[i])==freq.get(top[i+1])) && (top[i]>top[i+1]))
				{
					int temp = top[i];
					top[i]=top[i+1];
					top[i+1]=temp;
				}
				else
					break;
			i-=1;	
			}
			for (int j = 0; j < k && top[j] != 0; ++j) 
                System.out.print(top[j] + " "); 
		}
		System.out.println();
	}
	public static void main(String[] args) 
	{
		int k = 4; 
        int[] arr = { 5, 2, 1, 3, 2 }; 
        int n = arr.length; 
        kTop(arr, n, k);
	}
}
