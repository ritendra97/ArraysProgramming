//Given an array arr[], find the maximum j â€“ i such that arr[j] > arr[i]
import java.util.*;
public class Solution 
{
	static int maxIndexDiff(int arr[], int n)
    {
		int maxindex=-1;
		for(int i=0;i<n;i++)
		{
			for(int j=n-1;j>=0;j--)
			{
				if(arr[i]<arr[j])
				{
					maxindex=Math.max(maxindex, j-i);
				}
			}
		}
		return maxindex;
    }
	public static void main(String[] args) 
	{
		int arr[]= {1, 2, 3, 4, 5, 6};
		int n=arr.length;
		 System.out.println(maxIndexDiff(arr,n));
	}
}
// The efficient method
import java.util.*;
public class Solution 
{
    	static int maxIndexDiff(int arr[], int n)
	    {
			int maxdiff=-1;
			int Lmin[] = new int[n];
			int Rmax[] = new int[n];
			Lmin[0]=arr[0];
			for(int i=1;i<n;i++)
			{
				Lmin[i]=Math.min(arr[i], Lmin[i-1]);
			}
			Rmax[n-1]=arr[n-1];
			for(int j=n-2;j>=0;j--)
			{
				Rmax[j]=Math.max(arr[j], Rmax[j+1]);
			}
			int k=0;
			int l=0;
			while(k<n && l<n)
			{
				if(Lmin[k]<Rmax[l])
				{
					maxdiff= Math.max(maxdiff, l-k);
					l=l+1;
				}
				else
				{
					k=k+1;
				}
			}
			return maxdiff;
	    }
	public static void main(String[] args) 
	{
		int arr[]= {34, 8, 10, 3, 2, 
	             80, 30, 33, 1};
		int n=arr.length;
		System.out.println(maxIndexDiff(arr,n));
	}
}
