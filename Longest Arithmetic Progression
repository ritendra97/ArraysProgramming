//Longest Arithmetic Progression
import java.util.*;
public class Solution 
{
	static int lenghtOfLongestAP(int[] set, int n) 
    {
		if(n<3)
			return 2;
        int max=2;
        // Create a dynamic programming table 
        HashMap<Integer,Integer> [] dp = new HashMap[n];
        for(int i=0;i<n;i++)
        {
        	dp[i] = new HashMap<Integer,Integer>();
        	for(int j=0;j<i;j++)
        	{
        		int diff = set[i]-set[j];
        		dp[i].put(diff, Math.max(dp[i].getOrDefault(diff, 1), dp[j].getOrDefault(diff, 1)+1));
        		max = Math.max(max, dp[i].get(diff));
        	}
        }
        return max;
    }
	public static void main(String[] args) 
	{
		int set[] = {2, 4, 6, 8, 10};
		int n=set.length;
		System.out.println(lenghtOfLongestAP(set,n));
	}
}
