// TC-> O(n^2)
class Solution {
    
    public int largestRectangleArea(int[] heights) {
        
        int n = heights.length;
        int max_area = 0;
        for(int i=0;i<n;i++){
            
            max_area = Math.max(max_area,heights[i]);
            int min_height = heights[i];
            for(int j=i-1;j>=0;j--){
                
                min_height = Math.min(heights[j],min_height);
                int width = i-j+1;
                max_area = Math.max(max_area,min_height*width);
            }
        }
        return max_area;
    }
}


class Solution {
    
    public int largestRectangleArea(int[] heights) {
        
        int n = heights.length;
        int lb[] = new int[n];
        int rb[] = new int[n];
        
        
        rb[n-1] = n;
        Stack<Integer> st = new Stack<Integer>();
        st.push(n-1);
        for(int i=n-2;i>=0;i--){
            
            while(!st.isEmpty() && heights[st.peek()]>=heights[i]){
                st.pop();
            }
            
            if(st.isEmpty()){
                rb[i]=n;
            }else{
                rb[i]=st.peek();
            }
            st.push(i);
        }
        
        st.clear();
        lb[0]=-1;
        st.push(0);
        for(int i=1;i<n;i++){
            
            while(!st.isEmpty() && heights[st.peek()]>=heights[i]){
                st.pop();
            }
            
            if(st.isEmpty()){
                lb[i]=-1;
            }else{
                lb[i]=st.peek();
            }
            st.push(i);
        }
        
        int max_area=0;
        for(int i=0;i<n;i++){
            
            int width = rb[i]-lb[i]-1;
            int area = heights[i]*width;
            
            if(max_area<area){
                max_area = area;
            }
        }
        return max_area;
    }
}
