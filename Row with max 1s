//Row with max 1s
// O(n2) Solutions
import java.util.*;
public class Solution 
{
	static int rowWithMax1s(int arr[][], int n) 
    {
		int max= 0;
		int count=0;
		int ans=-1;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(arr[i][j]==1)
					count++;
			}
			if(max<count)
			{
				max=count;
				ans=i;
			}
			count=0;
		}
		return ans;
    }
	public static void main(String[] args) 
	{
		int arr[][] = {{0, 0, 0, 0},
		           {0, 0, 0, 0},
		           {0, 0, 0, 0},
		           {0, 0, 0, 0}};
		int n=arr.length;
		System.out.println(rowWithMax1s(arr,n));
	}
}
//Row with max 1s
// you know how to solve O(n2) Solution 
// but below solution is in O(mlogn)
// here m no of rows.

// Now i am going to solve in O(m+n) Solution

import java.util.*;
public class Solution {
	
	public static int firstindex(int arr[],int l,int r){
		
		while(l<=r)
		{
			int mid = l+(r-l)/2;
			
			if(mid==0 || arr[mid]==1 && arr[mid-1]==0)
				return mid;
			else if(arr[mid]==0)
				return firstindex(arr,mid+1,r);
			else
				return firstindex(arr,l,mid-1);
		}
		return -1;
	}
	public static int rowWithMax1s(int arr[][], int n) 	{
		int R =4;
		int C=4;
		int max_row = 0;
		int ans=0;
		int i;
		
		for(i=0;i<R;i++)
		{
			int index = firstindex(arr[i],0,C-1);
			if(index!=-1 && max_row<C-index)
			{
				max_row = C-index;
				ans = i;
			}
				
		}
		return ans;
	}
	public static void main(String[] args) {
		 
		int arr[][] = {{0, 1, 1, 1},
		              {0, 0, 1, 1},
		              {1, 1, 1, 1},
		              {0, 0, 0, 0}};
		int n = arr.length;
		System.out.println(rowWithMax1s(arr,n));
	}
}

// O(m+n) Solution
import java.util.*;
public class Solution {
	public static int rowWithMax1s(int arr[][], int n) {
		int R=4;
		int C=4;
		
		int max_row=0;
		int j=-1;
		
		for(int i=0;i<R;i++) {
			if(arr[0][i]==1)
			{
				j=i;
				break;	
			}
		}
		
		if(j==-1)
			j=C-1;
		
	    // Now  we will traverse from row 1;
		for(int i=1;i<R;i++)
		{
			while(j>=0 && arr[i][j]==1)
			{
				j--;
				max_row=i;
			}
		}
		return max_row;
	}
	public static void main(String[] args) {
		 
		int arr[][] = {{0, 1, 1, 1},
		               {0, 0, 1, 1},
		               {1, 1, 1, 1},
		               {0, 0, 0, 0}};
		int n = arr.length;
		System.out.println(rowWithMax1s(arr,n));
	}
}
