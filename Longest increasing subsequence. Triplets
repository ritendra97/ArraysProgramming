//Longest increasing subsequence. Triplets
// below is O(n) Solution

class Solution {
    public boolean increasingTriplet(int[] nums) 
    {
        int i = Integer.MAX_VALUE;
        int j = Integer.MAX_VALUE;    
        for(int k=0;k<nums.length;k++)
        {
            if(nums[k]<=i)
                i=nums[k];
            else if(nums[k]<=j)
                j=nums[k];
            else 
                return true;
        }
        return false;
    }
    
}

// This is O(NlogN) Solution

class Solution {
    public boolean increasingTriplet(int[] nums) 
    {
        int len=0;
        int LIS[] = new int[nums.length];
        for(int k=0;k<nums.length;k++)
        {
            int i=0;
            int j=len;
            while(i<j)
            {
                int mid = i+(j-i)/2;
                
                if(LIS[mid]<nums[k])
                    i=mid+1;
                else
                    j=mid;
            }
            LIS[i]=nums[k];
            if(i==len)
                len++;
        }
        if(len>=3)
            return true;
        else
            return false;
    }
}
